#pragma once

#include <cryptopp/secblock.h>
#include <cryptopp/osrng.h>
#include <cryptopp/dh.h>
#include <cryptopp/dh2.h>

namespace ncnet {
    struct KeyPair {
        std::shared_ptr<CryptoPP::SecByteBlock> priv;
        std::shared_ptr<CryptoPP::SecByteBlock> pub;
    };

    class Security {
    public:
        explicit Security();
        std::string get_pub_dh_key() const;
        std::string get_pub_sign_key() const;
        // Returns string consisting of [Encrypted CEK][CMAC]
        std::string compute_shared_key(const std::string &client_dh_pub, const std::string &client_sign_pub);
        // Reads the string generated by compute_shared_key and sets the CEK
        void set_encrypted_cek(const std::string &cek);
        // Encrypt plain using CEK and place it in cipher
        void encrypt(const std::shared_ptr<std::vector<CryptoPP::byte>> &plain, size_t start, std::shared_ptr<std::vector<CryptoPP::byte>> &cipher);
        // Decrypt cipher using CEK and place it in plain
        void decrypt(const std::shared_ptr<std::vector<CryptoPP::byte>> &cipher, size_t start, std::shared_ptr<std::vector<CryptoPP::byte>> &plain);

    private:
        std::shared_ptr<CryptoPP::DH> dh_; // D-H parameters environment
        std::shared_ptr<CryptoPP::DH2> dh2_; // Key generator
        KeyPair dh_key_; // Key exchange keys
        KeyPair sign_key_; // Authentication keys
        std::shared_ptr<CryptoPP::SecByteBlock> shared_key_; // Shared secret
        std::shared_ptr<CryptoPP::SecByteBlock> cek_; // Content encryption key, also shared secret
        std::shared_ptr<CryptoPP::AutoSeededRandomPool> rnd_; // Random generator pool
    };
}